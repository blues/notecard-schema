{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/blues/notecard-schema/master/note.template.req.notecard.api.json",
    "title": "note.template Request Application Programming Interface (API) Schema",
    "description": "By using the note.template request with any .qo/.qos Notefile, developers can provide the Notecard with a schema of sorts to apply to future Notes added to the Notefile. This template acts as a hint to the Notecard that allows it to internally store data as fixed-length binary records rather than as flexible JSON objects which require much more memory. Using templated Notes in place of regular Notes increases the storage and sync capability of the Notecard by an order of magnitude.",
    "type": "object",
    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"],
    "properties": {
        "file": {
            "description": "The name of the Notefile to which the template will be applied.",
            "type": "string"
        },
        "body": {
            "description": "A sample JSON body that specifies field names and values as \"hints\" for the data type. Possible data types are: boolean, integer, float, and string.",
            "type": "object"
        },
        "length": {
            "description": "The maximum length of a payload (in bytes) that can be sent in Notes for the template Notefile. As of v3.2.1 length is not required, and payloads can be added to any template-based Note without specifying the payload length.",
            "type": "integer",
            "minimum": 0
        },
        "verify": {
            "description": "If `true`, returns the current template set on a given Notefile.",
            "type": "boolean"
        },
        "format": {
            "description": "By default all Note templates automatically include metadata, including a timestamp for when the Note was created, various fields about a device's location, as well as a timestamp for when the device's location was determined. By providing a format of \"compact\" you tell the Notecard to omit this additional metadata to save on storage and bandwidth. The use of format: \"compact\" is required for Notecard LoRa and a Notecard paired with Starnote.",
            "type": "string",
            "enum": ["compact"],
            "sub-descriptions": [
                {
                    "const": "compact",
                    "description": "Omit additional metadata to save on storage and bandwidth. Required for Notecard LoRa and a Notecard paired with Starnote. When using \"compact\" templates, you may include the following keywords in your template to add in fields that would otherwise be omitted: `_lat`, `_lon`, `_ltime`, `_time`.",
                    "skus": ["CELL", "CELL+WIFI", "LORA", "WIFI"]
                }
            ]
        },
        "port": {
            "description": "A port is a unique integer in the range 1â€“100, where each unique number represents one Notefile. This argument allows the Notecard to send a numerical reference to the Notefile over the air, rather than the full Notefile name. The port you provide is also used in the \"frame port\" field on LoRaWAN gateways.",
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "skus": ["LORA"]
        },
        "delete": {
            "description": "Set to `true` to delete all pending Notes using the template if one of the following scenarios is also true: Connecting via non-NTN (e.g. cellular or Wi-Fi) communications, but attempting to sync NTN-compatible Notefiles. or Connecting via NTN (e.g. satellite) communications, but attempting to sync non-NTN-compatible Notefiles.",
            "type": "boolean"
        },
        "cmd": {
            "description": "Command for the Notecard (no response)",
            "const": "note.template"
        },
        "req": {
            "description": "Request for the Notecard (expects response)",
            "const": "note.template"
        }
    },
    "oneOf": [
        {
            "required": [
                "req"
            ],
            "properties": {
                "req": {
                    "const": "note.template"
                }
            }
        },
        {
            "required": [
                "cmd"
            ],
            "properties": {
                "cmd": {
                    "const": "note.template"
                }
            }
        }
    ],
    "if": {
        "properties": {
            "port": {
                "type": "integer"
            }
        },
        "required": ["port"]
    },
    "then": {
        "anyOf": [
            {
                "properties": {
                    "req": {
                        "const": "note.template"
                    }
                },
                "required": ["req"]
            },
            {
                "properties": {
                    "cmd": {
                        "const": "note.template"
                    }
                },
                "required": ["cmd"]
            }
        ]
    },
    "additionalProperties": false,
    "samples": [
        {
            "req": "note.template",
            "file": "readings.qo",
            "body": {
                "new_vals": true,
                "temperature": 14.1,
                "humidity": 11,
                "pump_state": "4"
            }
        },
        {
            "req": "note.template",
            "file": "sensor.qo",
            "format": "compact"
        },
        {
            "cmd": "note.template",
            "verify": true
        }
    ],
    "version": "0.2.0",
    "apiVersion": "9.1.1"
}
