{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "$id": "https://raw.githubusercontent.com/blues/notecard-schema/master/web.post.req.notecard.api.json",
    "title": "web.post Request Application Programming Interface (API) Schema",
    "description": "Performs a simple HTTP or HTTPS POST request against an external endpoint, and returns the response to the Notecard.",
    "type": "object",
    "version": "0.2.1",
    "apiVersion": "9.1.1",
    "skus": ["CELL", "CELL+WIFI", "WIFI"],
    "properties": {
        "route": {
            "description": "Alias for a Proxy Route in Notehub.",
            "type": "string"
        },
        "name": {
            "description": "A web URL endpoint relative to the host configured in the Proxy Route. URL parameters may be added to this argument as well (e.g. `/addReading?id=1`).",
            "type": "string"
        },
        "body": {
            "description": "The JSON body to send with the request.",
            "type": "object"
        },
        "payload": {
            "description": "A base64-encoded binary payload. A web.post may have either a `body` or a `payload`, but may NOT have both. Be aware that Notehub will decode the payload as it is delivered to the endpoint.",
            "type": "string",
            "contentEncoding": "base64"
        },
        "content": {
            "description": "The MIME type of the body or payload of the response. Default is `application/json`.",
            "type": "string"
        },
        "headers": {
            "description": "HTTP headers for the request.",
            "type": "object"
        },
        "seconds": {
            "description": "If specified, overrides the default 90 second timeout.",
            "type": "integer"
        },
        "total": {
            "description": "When sending large payloads to Notehub in fragments across several `web.post` requests, the total size, in bytes, of the binary payload across all fragments.",
            "type": "integer"
        },
        "offset": {
            "description": "When sending payload fragments, the number of bytes of the binary payload to offset from 0 when reassembling on the Notehub once all fragments have been received.",
            "type": "integer"
        },
        "status": {
            "description": "A 32-character hex-encoded MD5 sum of the payload or payload fragment. Used by Notehub to perform verification upon receipt.",
            "type": "string"
        },
        "max": {
            "description": "The maximum size of the response from the remote server, in bytes. Useful if a memory-constrained host wants to limit the response size.",
            "type": "integer"
        },
        "verify": {
            "description": "`true` to request verification from Notehub once the payload or payload fragment is received. Automatically set to `true` when `status` is supplied.",
            "type": "boolean"
        },
        "async": {
            "description": "If `true`, the Notecard performs the web request asynchronously, and returns control to the host without waiting for a response from Notehub.",
            "type": "boolean"
        },
        "binary": {
            "description": "If `true`, the Notecard will send all the data in the binary buffer to the specified proxy route in Notehub.",
            "type": "boolean"
        },
        "file": {
            "description": "The name of the local-only Database Notefile (`.dbx`) to be used if the web request is issued asynchronously and you wish to store the response.",
            "type": "boolean"
        },
        "note": {
            "description": "The unique Note ID for the local-only Database Notefile (`.dbx`). Only used with asynchronous web requests (see `file` argument above).",
            "type": "string"
        },
        "cmd": {
            "description": "Command for the Notecard (no response)",
            "const": "web.post"
        },
        "req": {
            "description": "Request for the Notecard (expects response)",
            "const": "web.post"
        }
    },
    "oneOf": [
        {
            "required": [
                "req"
            ],
            "properties": {
                "req": {
                    "const": "web.post"
                }
            }
        },
        {
            "required": [
                "cmd"
            ],
            "properties": {
                "cmd": {
                    "const": "web.post"
                }
            }
        }
    ],
    "additionalProperties": false,
    "samples": [
        {
            "description": "Performs a simple HTTP or HTTPS POST request and returns the response.",
            "json": "{\"req\": \"web.post\", \"route\": \"SensorService\", \"name\": \"/addReading\", \"body\": {\"temp\": 72.32, \"humidity\": 32.2 }}"
        }
    ]
}
